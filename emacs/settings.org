* Basic setup

Ensure that package archives are available and setup package infastructure.

#+BEGIN_SRC emacs-lisp
  ;; ensure everything is byte-compiled
  (byte-recompile-directory (expand-file-name "~/.emacs.d") 0)

  (require 'google)

  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

  (eval-when-compile
    (add-to-list 'load-path
                 (expand-file-name "use-package" user-emacs-directory))
    (require 'use-package-ensure)
    (setq use-package-always-ensure t))

  (set-frame-parameter nil 'name server-name) ;; for eyebrowse since it saves based on frame name

  (defun open-config()
    (interactive)
    (find-file (expand-file-name "settings.org" user-emacs-directory)))
#+END_SRC

* Global configs

#+BEGIN_SRC emacs-lisp
  (setq scroll-step           1
        scroll-conservatively 10000)
  (xterm-mouse-mode 1)

  (menu-bar-mode -1) ; turn off file menu
  (tool-bar-mode -1) ; turn off the save/open file/etc buttons at the top of emacs
  (scroll-bar-mode -1)
  (setq-default indent-tabs-mode nil)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; store all backup and autosave files in the tmp dir
  (setq backup-directory-alist
        `(("." . ,temporary-file-directory)))

  ;; Line numbers
  (setq-default display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)
  (column-number-mode)
#+END_SRC

* Programming languages

#+BEGIN_SRC emacs-lisp
  (use-package magit)
  (use-package transient)
  (use-package format-all)

  (defun indent-org-block-automatically ()
    (when (org-in-src-block-p)
      (org-edit-special)
      (indent-region (point-min) (point-max))
      (org-edit-src-exit)))

  (use-package blamer
    :defer 20
    :custom
    (blamer-idle-time 0.3)
    (blamer-min-offset 70)
    :custom-face
    (blamer-face ((t :foreground "#7a88cf"
                     :background nil
                     :height 70
                     :italic t))))

  (use-package go-mode)

  (use-package python-mode)
  (defun pyformat ()
    (interactive)
    (shell-command-on-buffer-impl "pyformat"))

  (use-package code-cells
    :config
    (add-hook 'python-mode-hook 'code-cells-mode-maybe)
    (let ((map code-cells-mode-map))
        (define-key map (kbd "M-p") 'code-cells-backward-cell)
        (define-key map (kbd "M-n") 'code-cells-forward-cell)
        (define-key map (kbd "C-c C-c") 'code-cells-eval)
        ;; Overriding other minor mode bindings requires some insistence...
        (define-key map [remap jupyter-eval-line-or-region] 'code-cells-eval)))
#+END_SRC

* Whitespace settings

#+BEGIN_SRC emacs-lisp
;; (use-package whitespace
;;  :config
;;  (global-whitespace-mode 1)
;;  (setq whitespace-line-column 120)
;;  (setq whitespace-style '(face trailing lines spaces tabs empty
;;                                space-mark tab-mark
;;                                indentation indentation::space big-indent lines-tail))
;;  (setq whitespace-tab-regexp "    "))
#+END_SRC

* Emacs display configs

Set C-like language configuration for spacing. This includes C/C++, Java, etc.
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (save-place-mode 1)
  (global-whitespace-mode 1)
  (setq whitespace-style
        '(face tabs trailing space-before-tab newline indentation empty space-after-tab tab-mark missing-newline-at-eof))
  (custom-set-faces
   '(whitespace-tab ((t (:foreground "#636363" :background nil)))))


  ;; Set default font size
  (set-face-attribute 'default nil :height 80)

  ;; make popup backgrounds a little darker
  (use-package solaire-mode
    :config
    (solaire-global-mode +1))

  (use-package diff-hl
    :config
    (global-diff-hl-mode))

  (use-package mood-line
    :config
    (mood-line-mode))

  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

  (use-package eyebrowse-restore
    ;; :load-path "~/.emacs.d/eyebrowse-restore-src"
    :init
    (defun eyebrowse-restore-from-server-name (frame)
      (eyebrowse-restore server-name))
    :config
    ;; (add-hook 'after-make-frame-functions 'eyebrowse-restore-from-server-name)
    (eyebrowse-restore-mode))

  (use-package eyebrowse
    :after eyebrowse-restore
    :config
    (setq eyebrowse-mode t))
#+END_SRC


This section contains evil mode

#+BEGIN_SRC emacs-lisp
  (use-package undo-fu)
  (use-package evil-visualstar
    :config
    (global-evil-visualstar-mode))
  (use-package evil
    :init
    (setq evil-want-keybinding nil) ;; required by evil-collection
    :custom
    (evil-want-integration t) ;; This is optional since it's already set to t by default.
    (evil-want-C-u-scroll t)
    :config
    (evil-set-undo-system 'undo-fu)
    (evil-select-search-module 'evil-search-module 'evil-search)
    (evil-mode 1))
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+END_SRC

* Code completion

This section includes LSP, syntax checking (flycheck), completion (company), etc.

#+BEGIN_SRC emacs-lisp
  ;; better fuzzy search than flex (whole word matching)
  (use-package hotfuzz
    :config
    (setq completion-styles '(hotfuzz)))
  ;; even better fuzzy search that matches on multiple partial word queries at once
  (use-package orderless
    :after hotfuzz
    :custom
    (completion-styles '(orderless hotfuzz))
    (completion-category-overrides '((file (styles hotfuzz partial-completion)))))
  (use-package vertico
    :after orderless
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  (use-package projectile
    :config
    (projectile-mode +1))

  (use-package company
    :config
    (global-company-mode))

  (use-package eglot
    :config
    (add-hook 'go-mode-hook 'eglot-ensure))

  (use-package which-key
    :init
    (setq-default which-key-idle-delay 0.25)
    :config
    ;; Lower which-key latency
    (which-key-mode 1))

  ;; Ensure that filenames are unique and retain information about their directory.
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward
        uniquify-after-kill-buffer-p t ; rename after killing
        )
#+END_SRC

* Android.bp <=> BUILD functions

#+BEGIN_SRC emacs-lisp
  (setq androidInstallations '("aosp-master-with-phones2" "aosp-master-with-phones" "master"))
  (setq androidToplevelModules '("packages" "cts" "test" "system" "device" "hardware" "vendor" "kernel" "external" "bootable" "dalvik" "libcore" "pdk" "toolchain" "developers" "sdk" ".repo" "frameworks" "prebuilts" "development" "bionic" "tools" "art" "libnativehelper" "platform_testing" "build"))
  (defun isToplevelDirectory (dir toplevel)
    (not (eq nil (member dir toplevel))))
  (defun getToplevelPath (toplevel absolutePath remainingPath keepTopLevel)
    (if (>= 0 (length remainingPath))
        nil
      (let* ((dir (car remainingPath))
             (nextAbsolutePath (expand-file-name dir absolutePath))
             (nextModulePath (cdr remainingPath)))
        (if (isToplevelDirectory dir toplevel)
            (if keepTopLevel
                (list nextAbsolutePath nextModulePath)
              (list absolutePath remainingPath))
          (getToplevelPath toplevel nextAbsolutePath nextModulePath keepTopLevel)))))
  (defun getModulePath (path)
    (getToplevelPath androidToplevelModules "/" path nil))
  (defun getAndroidInstallPath (path)
    (getToplevelPath androidInstallations "/" path t))
  (defun getbp (currentFile)
    (getAndroidFile currentFile "Android.bp"))
  (defun getBUILD (currentFile)
    (getAndroidFile currentFile "BUILD.bazel"))
  (defun getAndroidFile (path filename)
    (let* ((pathToAndroidAndModule (getAndroidInstallPath path))
           (pathToAndroid (car pathToAndroidAndModule))
           (relativePathToModuleAndPrefix (getModulePath (car (cdr pathToAndroidAndModule))))
           (relativePathToModule (car (cdr relativePathToModuleAndPrefix)))
           (pathToSoongWorkspace (expand-file-name "out/soong/workspace/" pathToAndroid))
           (modulePathString (mapconcat 'identity relativePathToModule "/"))
           (modulePath (expand-file-name modulePathString pathToSoongWorkspace))
           (filePath (expand-file-name filename modulePath)))
      filePath))
  (defun findCorrespondingBuildFile ()
    (interactive)
    (let* ((currentFile (buffer-file-name (window-buffer (minibuffer-selected-window))))
           (splitPath (split-string currentFile "/"))
           (basename (car (last splitPath)))
           (modulePath (butlast splitPath)))
      (if (string= "BUILD.bazel" basename)
          (find-file (getbp modulePath))
        (if (string= "Android.bp" basename)
            (find-file (getBUILD modulePath))))))

  (defun gomod (moduleName)
    (interactive "s")
    (let* ((currentFile (buffer-file-name (window-buffer (minibuffer-selected-window))))
           (splitPath (split-string currentFile "/"))
           (currentModulePath (butlast splitPath))
           (pathToAndroid (car (getAndroidInstallPath currentModulePath)))
           (cd-command (concat "cd " pathToAndroid))
           (source-command "source build/envsetup.sh")
           (lunch-command "lunch aosp_arm > /dev/null 2>&1")
           (pathmod-command (concat "pathmod " moduleName))
           (shell-commands (list cd-command source-command lunch-command pathmod-command))
           (pathToNewModule (shell-command-to-string (mapconcat 'identity shell-commands " >/dev/null && ")))
           (android-bp-file (expand-file-name "Android.bp" (string-trim-right pathToNewModule))))
      (find-file android-bp-file)))
#+END_SRC

* Android specific configs

#+BEGIN_SRC emacs-lisp
  ;; Android filtypes
  (setq auto-mode-alist
        (append '((".*BUILD.*\\'" . bazel-build-mode))
                auto-mode-alist))
  (setq auto-mode-alist
        (append '((".*\\.bp\\'" . json-mode))
                auto-mode-alist))

  (defun cslink ()
    (interactive)
    (let* ((currentFile (buffer-file-name (window-buffer (minibuffer-selected-window))))
           (splitPath (split-string currentFile "/"))
           (pathsToAndroidTopAndFile (getAndroidInstallPath splitPath))
           (pathToFileFromTop (mapconcat 'identity (car (cdr pathsToAndroidTopAndFile)) "/"))
           (lineNumber (format-mode-line "%l"))
           (codeSearchUrl (concat "https://cs.android.com/android/platform/superproject/+/main:" pathToFileFromTop ";l=" lineNumber)))
      (message codeSearchUrl)
      codeSearchUrl))
  (defun cslink-copy ()
    (interactive)
    (let ((link (cslink)))
      (kill-new link)
      link))
  (defun cslink-open ()
    (interactive)
    (browse-url (cslink-copy)))
#+END_SRC

* Utilities

#+BEGIN_SRC emacs-lisp
  (defun kill-mode-buffers (mode)
    (mapc (lambda (buffer)
            (when (eq mode (buffer-local-value 'major-mode buffer))
              (kill-buffer buffer)))
          (buffer-list)))
  (defun kill-elisp-buffers ()
    (interactive)
    (kill-mode-buffers 'emacs-lisp-mode))
  (defun kill-go-buffers ()
    (interactive)
    (kill-mode-buffers 'go-mode))
  (defun kill-starlark-buffers ()
    (interactive)
    (kill-mode-buffers 'bazel-starlark-mode)
    (kill-mode-buffers 'skylark-mode))
  (defun kill-build-buffers ()
    (interactive)
    (kill-mode-buffers 'bazel-build-mode))

  (defun run-in-vterm-kill (process event)
    "A process sentinel. Kills PROCESS's buffer if it is live."
    (let ((b (process-buffer process)))
      (and (buffer-live-p b)
           (kill-buffer b))))

  (defun run-in-vterm (command)
    "Execute string COMMAND in a new vterm.

  Interactively, prompt for COMMAND with the current buffer's file
  name supplied. When called from Dired, supply the name of the
  file at point.

  Like `async-shell-command`, but run in a vterm for full terminal features.

  The new vterm buffer is named in the form `*foo bar.baz*`, the
  command and its arguments in earmuffs.

  When the command terminates, the shell remains open, but when the
  shell exits, the buffer is killed."
    (interactive
     (list
      (let* ((f (cond (buffer-file-name)
                      ((eq major-mode 'dired-mode)
                       (dired-get-filename nil t))))
             (filename (concat " " (shell-quote-argument (and f (file-relative-name f))))))
        (read-shell-command "Terminal command: "
                            (cons filename 0)
                            (cons 'shell-command-history 1)
                            (list filename)))))
    (with-current-buffer (vterm (concat "*" command "*"))
      (set-process-sentinel vterm--process #'run-in-vterm-kill)
      (vterm-send-string command)
      (vterm-send-return)))

  (defun shell-command-on-buffer-impl (command)
    (let ((line (line-number-at-pos)))
      ;; replace buffer with output of shell command
      (shell-command-on-region (point-min) (point-max) command nil t)
      ;; restore cursor position
      (goto-line line)
      (recenter-top-bottom)))

  (defun shell-command-on-buffer ()
    (interactive)
    (shell-command-on-buffer-impl (read-shell-command "Shell command on buffer: ")))
#+END_SRC

* Themes

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;(load-theme 'doom-spacegrey t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  (use-package color-theme-sanityinc-tomorrow)

  ;; for doom-monokai-pro, set the line numbers to be just a little lighter
  (custom-set-faces
    `(line-number ((t (:foreground ,(doom-color 'base6))))))
  (custom-set-faces
    `(line-number ((t (:foreground ,(doom-color 'base6))))))
#+END_SRC

* Keybindings

#+BEGIN_SRC emacs-lisp
  (use-package general)
  (general-define-key
   :states '(insert normal global)
   ;; prevent annoying command from running when I really just want to switch buffers
   "C-x C-o" 'other-window
   ;; prevent annoying kmacro popups when I really just want to kill a buffer
   "C-x C-k" 'kill-buffer
   ;; prevent annoying command from running when I really just want to switch buffers
   "C-x C-b" 'switch-to-buffer
   ;; prevent accidentally pressing this sequence from freezing emacs over CRD
   "C-x C-z" nil
   "C-/" 'comment-line
   )
  (general-define-key
   :states 'normal
   :keymaps 'override
   :prefix "SPC"
   "." 'find-file
   "," 'switch-to-buffer
   "*" 'projectile-ripgrep
   "b r" 'revert-buffer-quick
   "p" 'projectile-command-map
   "p ESC" nil
   "r" 'findCorrespondingBuildFile
   "c r" 'eglot-rename
   "c D" 'eglot-find-implementation
   "c t" 'eglot-find-typeDefinition
  )
#+END_SRC
