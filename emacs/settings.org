* Basic setup

Ensure that package archives are available and setup package infastructure.

#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

(eval-when-compile
  (add-to-list 'load-path
    (expand-file-name "use-package" user-emacs-directory))
    (require 'use-package-ensure)
    (setq use-package-always-ensure t))

(defun open-config()
    (interactive)
    (find-file (expand-file-name "settings.org" user-emacs-directory)))
#+END_SRC

* Global configs

#+BEGIN_SRC emacs-lisp
(setq scroll-step           1
      scroll-conservatively 10000)
(tool-bar-mode -1) ; turn off the save/open file/etc buttons at the top of emacs
(global-visual-line-mode) ;; word-wrap
(setq-default indent-tabs-mode nil)
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; store all backup and autosave files in the tmp dir
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

* Programming languages

#+BEGIN_SRC emacs-lisp
(use-package projectile
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1))
(use-package helm-projectile
    :config
    (helm-projectile-on))

(use-package magit)

(use-package rustic)
(use-package haskell-mode)
#+END_SRC

* Whitespace settings

#+BEGIN_SRC emacs-lisp
;; (use-package whitespace
;;  :config
;;  (global-whitespace-mode 1)
;;  (setq whitespace-line-column 120)
;;  (setq whitespace-style '(face trailing lines spaces tabs empty
;;                                space-mark tab-mark
;;                                indentation indentation::space big-indent lines-tail))
;;  (setq whitespace-tab-regexp "    "))
#+END_SRC

* Emacs display configs

Set C-like language configuration for spacing. This includes C/C++, Java, etc.
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)

(setq-default c-default-style "linux"
              c-basic-offset 4)
#+END_SRC

This section contains evil mode, helm, etc.

#+BEGIN_SRC emacs-lisp
(setq evil-disable-insert-state-bindings t)
(use-package evil
    :config
    (evil-mode 1))

(use-package helm
    :config
    (helm-mode 1)
    (global-set-key (kbd "M-x") #'helm-M-x)
    (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
    (global-set-key (kbd "C-x C-f") #'helm-find-files)
    (global-set-key (kbd "C-x C-b") #'helm-buffers-list))

(use-package which-key
    :config
    (which-key-mode 1))

(use-package nlinum-relative
    :config
    (nlinum-relative-setup-evil)
    (add-hook 'prog-mode-hook 'nlinum-relative-mode)
    (add-hook 'org-mode-hook 'nlinum-relative-mode))

(use-package vterm)
#+END_SRC

* Code completion

This section includes LSP, syntax checking (flycheck), completion (company), etc.

#+BEGIN_SRC emacs-lisp
(setq lsp-keymap-prefix "C-c l")
(use-package lsp-mode
    :hook ((prog-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)
(use-package lsp-ui :commands lsp-ui-mode)
(use-package helm-lsp :commands helm-lsp-workspace-symbol)
(with-eval-after-load 'lsp-mode
    (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration))

(use-package company
    :config
    (add-hook 'after-init-hook 'global-company-mode))

;; Flycheck: on-the-fly syntax checking
(use-package flycheck
    :config
    (add-hook 'after-init-hook #'global-flycheck-mode))
#+END_SRC

* Themes

#+BEGIN_SRC emacs-lisp
;; (use-package railscasts-reloaded-theme)
;; (use-package color-theme-sanityinc-tomorrow)
#+END_SRC
