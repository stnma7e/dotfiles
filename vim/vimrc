set nocompatible

call plug#begin()

Plug 'tpope/vim-fugitive'
Plug 'google/vim-maktaba'               " vimscript extensions (needed for vim-bazel)
Plug 'flazz/vim-colorschemes'
Plug 'Raimondi/delimitMate'             " autocloses parens
Plug 'scrooloose/nerdcommenter'
"Plug 'scrooloose/nerdtree'
Plug 'luochen1990/rainbow'
Plug 'ervandew/supertab'
Plug 'vim-syntastic/syntastic'
Plug 'bling/vim-airline'
" Plug 'sirver/ultisnips'
Plug 'honza/vim-snippets'
Plug 'dhruvasagar/vim-table-mode'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'rakr/vim-one'
Plug 'airblade/vim-gitgutter'
Plug 'rrethy/vim-illuminate'
"Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'thinca/vim-visualstar'

" Colorschemes
Plug 'sonph/onehalf', {'rtp': 'vim/'}

" Languages
if (has("nvim"))
    Plug 'neovim/nvim-lspconfig'
else
    Plug 'lervag/vimtex'
    Plug 'hallison/vim-markdown'
    Plug 'lukerandall/haskellmode-vim'
    Plug 'liuchengxu/vista.vim'
    Plug 'rust-lang/rust.vim'
    Plug 'andys8/vim-elm-syntax'
    Plug 'leafgarland/typescript-vim'
    Plug 'fatih/vim-go' ", { 'do': ':GoUpdateBinaries' }
endif

Plug 'bazelbuild/vim-bazel'

call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Keybindings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <SPACE> <Nop>
let mapleader=" "

" plugin keybindings
nnoremap <leader>, :CtrlPBuffer<cr>
nnoremap <leader>. :CtrlPMixed<cr>
map <C-x><C-k> :bp\|bd #
map <C-x><C-s> :w<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Usage settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set mouse=a
" remap :q to :close, that way we don't accidentally quit the last window
cabbrev q <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'close' : 'q')<CR>

if has("syntax")
  syntax on
endif

if has("autocmd")
  " jump to last position when reopening a file
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

  " load indentation rules/plugins according to detected filetype
  filetype plugin indent on
endif

let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_winsize = 25
let g:netrw_browse_split = 4


let c_space_errors = 1
set ai 				         " Autoindent
set backspace=indent,eol,start

set ignorecase        		 " Do case insensitive matching
set smartcase		    	 " Do smart case matching
set incsearch     	         " Incremental search

set hidden            		 " Hide buffers when they are abandoned
set autoread	      		 " watch for file changes

set tabstop=8
set shiftwidth=4
set expandtab 			     " Convert tabs to spaces

set updatetime=100

set undofile
if (has("nvim"))
    set undodir=~/.vim/undodir_nvim
else
    set undodir=~/.vim/undodir
endif

set list lcs=trail:·,tab:»\ ,eol:¬

let g:haddock_browser = "/usr/bin/firefox"
au Bufenter *.hs compiler ghc

let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:tex_conceal='abdmg'

let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

" Go LSP settings
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'

if executable('rg')
  let g:ctrlp_user_command = 'rg %s --files --hidden --color=never --glob ""'
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" UI settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
"For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
"Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
" < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
if (has("termguicolors"))
    set termguicolors
endif

" You might have to force true color when using regular vim inside tmux as the
" colorscheme can appear to be grayscale with "termguicolors" option enabled.
if !has('gui_running') && &term =~ '^\%(screen\|tmux\)'
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

syntax on
set termguicolors

colorscheme onehalfdark
let g:airline_theme='onehalfdark'
" colorscheme bensday
" colorscheme desertEx
" colorscheme hybrid
set background=dark

let g:rainbow_active = 1

" Highlight current line
set cul
hi CursorLine term=none cterm=none ctermbg=0

hi def IlluminatedWordText gui=bold

set showcmd           		 " Show (partial) command in status line.
set ruler 			         " Show location in file
set number 			         " Show line numbers
set relativenumber
set nohlsearch 			     " Highlight matches
set showmatch         		 " Show matching brackets.
set mousehide 			     " Don't show mouse while typing
set wildmenu
set wildmode=longest,list,full
